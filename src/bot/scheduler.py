import aiogram.exceptions
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, exceptions, types
from aiogram.types import FSInputFile
from src.database import AsyncSessionLocal
from src.models import Post, AdPost, InstantPost
from sqlalchemy import select, func, update
from datetime import datetime, timezone
from src.core import Config
from random import choice as random_choice
from random import randint as random_int
import asyncio
import logging

sched = AsyncIOScheduler()

logger = logging.getLogger(__name__)

DEFAULT_CAPTION = (f'üì∏ <b>–£–í–ê–ñ–ê–ï–ú–´–ï –ü–û–î–ü–ò–°–ß–ò–ö–ò!</b> üì∏\n\n'
                   f'–ú—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!\n'
                   f'–ò —Ö–æ—Ç–∏–º –≤—ã—Ä–∞–∑–∏—Ç—å –í–∞–º –æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ '
                   f'–í–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n'
                   f'–û–ì–†–û–ú–ù–û–ï –°–ü–ê–°–ò–ë–û!  ‚ô•Ô∏è ‚ô•Ô∏è ‚ô•Ô∏è')

REGULAR_POST_REACTIONS = ['‚ù§', 'üëç', 'üî•', 'üëè', 'üò±', 'ü§©', 'üëå', 'üòç', 'üíØ']


def instant_post_caption(instant_post: InstantPost):
    result = ''

    if instant_post.text:
        result += f'{instant_post.text}\n'

    if instant_post.tags:
        result += f'\n'
        tag_list = instant_post.tags.split()
        for tag in tag_list:
            result += f'#{tag}  '

    return result.replace('****', '\n')


def ad_post_caption(ad_post: AdPost):
    result = '–†–µ–∫–ª–∞–º–∞\n'

    if ad_post.erid:
        result += f'erid: {ad_post.erid}\n'

    if ad_post.advertiser_name:
        result += f'{ad_post.advertiser_name}\n'

    if ad_post.advertiser_link:
        result += f'{ad_post.advertiser_link}\n'

    if ad_post.title:
        result += f'\n{ad_post.title}\n'

    if ad_post.text:
        result += f'\n{ad_post.text}\n'

    if ad_post.link:
        result += f'\n{ad_post.link}\n'

    if ad_post.tags:
        result += f'\n'
        tag_list = ad_post.tags.split()
        for tag in tag_list:
            result += f'#{tag}  '

    return result.replace('****', '\n')


def regular_post_caption(regular_post: Post):
    result = ''

    if regular_post.header:
        result += f'<i>{regular_post.header}</i>\n\n'
    # else:
    #     result += f'üì∑\n\n'

    if regular_post.title:
        result += f'<b>{regular_post.title}</b>\n\n'

    if regular_post.author:
        result += f'–ê–≤—Ç–æ—Ä: <b>{regular_post.author}</b>\n'

    if regular_post.date and regular_post.location:
        result += f'{regular_post.location}; {regular_post.date}\n'
    else:
        if regular_post.date:
            result += f'{regular_post.date}\n'
        if regular_post.location:
            result += f'{regular_post.location}\n'

    if regular_post.caption:
        result += f'\n<blockquote><i>{regular_post.caption}</i></blockquote>\n'

    if regular_post.tags:
        result += f'\n'
        tag_list = regular_post.tags.split()
        for tag in tag_list:
            result += f'#{tag}  '

    return result.replace('****', '\n')


async def send_post(bot: Bot, post: Post):
    max_retries = 10
    retry_delay = 15

    for attempt in range(max_retries):
        try:
            logger.info(f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ {post.id} –≤ —á–∞—Ç {Config.CHAT_ID}")

            if isinstance(post, Post):
                caption = regular_post_caption(post)
            elif isinstance(post, AdPost):
                caption = ad_post_caption(post)
            elif isinstance(post, InstantPost):
                caption = instant_post_caption(post)
            else:
                caption = DEFAULT_CAPTION
                await bot.send_message(
                    chat_id=Config.CHAT_ID,
                    text=caption,
                    parse_mode=Config.PARSE_MODE
                )
                await bot.send_message(
                    chat_id=Config.ADMIN_CHAT_ID,
                    text='–ù–ï–ü–û–õ–ê–î–ö–ê –° –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –ö–õ–ê–°–°–ê '
                         '–û–¢–ü–†–ê–í–õ–Ø–ï–ú–û–ì–û –ü–û–°–¢–ê\n'
                         'src/scheduler.py/send_post()'
                )
                return

            logger.debug(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ Telegram API...")

            photo_path = post.photo_path.replace('@', Config.PHOTO_DIR)

            if Config.PRODUCTION_MODE:
                photo_path = photo_path.replace('\\', '/')
            else:
                photo_path = photo_path.replace('/', '\\')

            result = await bot.send_photo(
                chat_id=Config.CHAT_ID,
                photo=FSInputFile(photo_path),
                caption=caption,
                parse_mode=Config.PARSE_MODE
            )

            await add_reaction_to_post(bot, result.message_id)

            if attempt > 1:
                await bot.send_message(chat_id=Config.ADMIN_CHAT_ID, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ {result.message_id} '
                                                                          f'–Ω–∞–∫–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')

            logger.info(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! Message ID: {result.message_id}")

            break

        except aiogram.exceptions.TelegramNetworkError as e:
            error_message_for_admin = (f'ARThesis: —Ñ–æ—Ç–æ–∏—Å–∫—É—Å—Å—Ç–≤–æ. –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–≤—è–∑—å—é –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ—Å—Ç–∞.\n\n'
                                       f'–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞. –ü–æ–ø—ã—Ç–∫–∞ # {attempt}\n\n'
                                       f'ERROR: \n{e}')
            await bot.send_message(chat_id=Config.ADMIN_CHAT_ID, text=error_message_for_admin)
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay)
            else:
                raise e
        except exceptions.TelegramForbiddenError as e:
            logger.error(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: {e}")
        except exceptions.TelegramBadRequest as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API: {e}")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())


async def add_reaction_to_post(bot: Bot, message_id: int):
    try:
        time_delay = random_int(3, 15)
        reactions_list = REGULAR_POST_REACTIONS
        reaction = random_choice(reactions_list)
        await asyncio.sleep(time_delay)
        await bot.set_message_reaction(
            chat_id=Config.CHAT_ID,
            message_id=message_id,
            reaction=[types.ReactionTypeEmoji(emoji=reaction)],
            is_big=False
        )

        logger.info(f"üé≠ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è '{reaction}' –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}")

    except exceptions.TelegramBadRequest as e:
        if "message reaction not allowed" in str(e).lower():
            logger.warning("‚ö†Ô∏è –†–µ–∞–∫—Ü–∏–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ add_reaction_to_post: {e}")


async def publish_regular_post(bot: Bot):
    logger.info("‚è∞ –ó–∞–ø—É—Å–∫ publish_regular_post")

    try:
        async with AsyncSessionLocal() as db:
            stmt = (
                select(Post)
                .where(Post.is_active == True, Post.shown == False)
                .order_by(func.random())
                .limit(1)
            )
            post = (await db.execute(stmt)).scalar_one_or_none()

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post}")

            if not post:
                logger.info("üì≠ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞—é —Ñ–ª–∞–≥–∏ shown")
                # –≤—Å–µ –ø–æ–∫–∞–∑–∞–Ω—ã ‚Äî —Å–±—Ä–æ—Å
                await db.execute(
                    update(Post).where(Post.is_active == True).values(shown=False)
                )
                await db.commit()
                post = (await db.execute(stmt)).scalar_one_or_none()
                logger.info(f"üîÑ –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –Ω–∞–π–¥–µ–Ω –ø–æ—Å—Ç: {post}")

            if post:
                post.shown = True
                await db.commit()
                logger.info(f"üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç: {post.title}")
                await send_post(bot, post)
                logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {post.title}")
            else:
                logger.warning("‚ö†Ô∏è –ü–æ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_regular_post: {e}")
        import traceback
        logger.error(traceback.format_exc())


async def publish_instant_or_ad(bot: Bot):
    now_utc = datetime.now(timezone.utc)
    now_msk = now_utc.astimezone(Config.TIMEZONE)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ MSK

    async def _publish_post(publishing_post, db_session, time_msk):
        remaining_times = []
        should_send = False

        for scheduled_time_utc in publishing_post.schedule:
            scheduled_time = datetime.fromisoformat(scheduled_time_utc).astimezone(Config.TIMEZONE)

            if scheduled_time <= time_msk:
                print(f'  –ù–ê–ó–ù–ê–ß–ï–ù–ù–û–ï (–ú–°–ö):  {scheduled_time}')
                print(f"       –°–ï–ô–ß–ê–° (–ú–°–ö):  {time_msk}")
                should_send = True  # –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç
            else:
                remaining_times.append(scheduled_time_utc)  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π

        if should_send:
            await send_post(bot, publishing_post)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            if remaining_times:
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±—É–¥—É—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º schedule
                publishing_post.schedule = remaining_times
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                publishing_post.is_active = False

            await db_session.commit()

    async with AsyncSessionLocal() as db:
        # InstantPost –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        instant_stmt = select(InstantPost).where(InstantPost.is_active == True)
        instant_posts = (await db.execute(instant_stmt)).scalars().all()

        for post in instant_posts:
            await _publish_post(post, db, now_msk)

        # AdPost –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        ad_stmt = select(AdPost).where(AdPost.is_active == True)
        ad_posts = (await db.execute(ad_stmt)).scalars().all()

        for post in ad_posts:
            await _publish_post(post, db, now_msk)


def start_scheduler(bot: Bot):
    sched.add_job(
        publish_regular_post,
        # trigger="cron",
        # hour=Config.REGULAR_POST_HOUR_UTC,
        # minute=0,
        # timezone='UTC',
        trigger='interval',
        minutes=1,
        args=[bot],
    )
    sched.add_job(
        publish_instant_or_ad,
        trigger="cron",
        minute=Config.INSTANT_CHECK_MINUTES,
        timezone='UTC',
        args=[bot],
    )
    sched.start()
