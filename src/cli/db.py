import shutil
from typing import Optional
import asyncio
import typer
from pathlib import Path
from src.database import Base, engine
from datetime import datetime
from src.core import Config

app = typer.Typer()

BACKUP_DIR = Path(Config.BASE_DIR) / "backups"
BACKUP_DIR.mkdir(exist_ok=True)


# ---------- Database ----------

@app.command("init")
def init_db():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î."""

    async def _init():
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)

    asyncio.run(_init())
    typer.echo("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


@app.command("backup")
def backup_db(
        name: Optional[str] = typer.Option(None, "--name", help="–ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞"),
        compress: bool = typer.Option(True, "--compress/--no-compress", help="–°–æ–∑–¥–∞—Ç—å .zip –∞—Ä—Ö–∏–≤")
):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î."""
    try:
        db_file = Path(Config.DB_URL.replace("sqlite+aiosqlite:///", ""))
        if not db_file.exists():
            typer.secho("‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω!", fg=typer.colors.RED)
            raise typer.Exit(1)

        timestamp = datetime.now().strftime("%d-%m-%Y_%H-%M")
        backup_name = f"{name or 'backup'}_{timestamp}.db"
        backup_path = BACKUP_DIR / backup_name

        shutil.copy2(db_file, backup_path)
        typer.echo(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")

        if compress:
            zip_path = backup_path.with_suffix(".zip")
            shutil.make_archive(str(zip_path.with_suffix("")), 'zip', BACKUP_DIR, backup_name)
            backup_path.unlink()
            typer.echo(f"üì¶ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {zip_path}")

    except Exception as e:
        typer.secho(f"‚ùå –û—à–∏–±–∫–∞: {e}", fg=typer.colors.RED)
        raise typer.Exit(1)


@app.command("backups-list")
def list_backups():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—ç–∫–∞–ø—ã."""
    backups = sorted(BACKUP_DIR.glob("*.zip" if BACKUP_DIR.glob("*.zip") else "*.db"))
    if not backups:
        typer.echo("‚ÑπÔ∏è –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤.")
        return

    typer.echo("üìÇ –ë—ç–∫–∞–ø—ã:")
    for i, file in enumerate(backups, 1):
        typer.echo(f"  {i}. {file.name} ({file.stat().st_size / 1024:.1f} KB)")