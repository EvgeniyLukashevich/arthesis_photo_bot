import asyncio
import typer
from typing import Optional
from pathlib import Path
from src.database import AsyncSessionLocal
from src.models import Post
from .utils import post_activity_toggle, update_post_field, parse_filename


app = typer.Typer()


async def add_single_post(photo_file: str, author: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞
        metadata = parse_filename(photo_file)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        author_dir = author.replace(' ', '_')
        relative_path = f"@/{author_dir}/{photo_file}"

        async with AsyncSessionLocal() as db:
            db.add(Post(
                photo_path=relative_path,
                title=metadata['title'] or photo_file.stem.replace('_', ' ').title(),
                author=author,
                location=metadata['location'],
                date=metadata['date'],
                tags=metadata['tags'],
                is_active=True,
                shown=False
            ))
            await db.commit()

        return True

    except Exception as e:
        typer.secho(f"  ‚ùå  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {photo_file}: {e}", fg=typer.colors.RED)
        return False


@app.command("mass-add")
def bulk_add_from_folder(
        folder: Path = typer.Option(..., "--folder", help="–ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"),
        author: str = typer.Option(..., "--author", help="–ê–≤—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
):
    """–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""

    async def _process_folder():
        success_count = 0
        error_count = 0

        # –ò—â–µ–º –≤—Å–µ jpg –∏ png —Ñ–∞–π–ª—ã
        for photo_file in list(folder.glob("*.jpg")) + list(folder.glob("*.png")):
            try:
                if await add_single_post(photo_file.name, author):
                    success_count += 1
                    typer.secho(f"    ‚úÖ  –î–æ–±–∞–≤–ª–µ–Ω: {photo_file.name}", fg=typer.colors.GREEN)
                else:
                    error_count += 1
            except Exception as e:
                error_count += 1
                typer.secho(f"  ‚ùå –û—à–∏–±–∫–∞ —Å {photo_file.name}: {e}", fg=typer.colors.RED)

        typer.secho(f"\n    üìä  –ò—Ç–æ–≥: –£—Å–ø–µ—à–Ω–æ {success_count}, –û—à–∏–±–æ–∫ {error_count}", fg=typer.colors.BLUE)

    asyncio.run(_process_folder())


@app.command("add")
def add_post(
        file: Path = typer.Option(..., "--file"),
        title: str = typer.Option(None, "--title"),
        author: str = typer.Option(None, "--author"),
        date: str = typer.Option(None, "--date"),
        location: str = typer.Option(None, "--location"),
        caption: str = typer.Option(None, "--caption"),
        header: str = typer.Option(None, "--header"),
        tags: str = typer.Option(None, "--tags", help='–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç—ç–≥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, '
                                                      'e.g. "nature sunset photo_art"'),
        active: bool = typer.Option(True, "--active/--no-active"),
):
    async def _add():
        async with AsyncSessionLocal() as db:
            db.add(Post(
                photo_path=str(file.resolve()),
                title=title,
                author=author,
                date=date,
                location=location,
                caption=caption,
                header=header,
                tags=tags,
                is_active=active,
            ))
            await db.commit()

    asyncio.run(_add())
    typer.echo("    ‚úÖ  –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω")


@app.command("activate")
def activate_post(post_id: int):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π."""

    try:
        result = asyncio.run(post_activity_toggle(
            model=Post,
            post_id=post_id,
            active_status=True)
        )
        if result:
            typer.secho(f"    ‚úÖ  –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ü–æ—Å—Ç id={post_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", fg=typer.colors.GREEN)

    except Exception as e:
        typer.secho(
            f"    ‚ùå  –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ is_active "
            f"–†–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ü–æ—Å—Ç–∞ id={post_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n"
            f"{e}",
            fg=typer.colors.RED
        )


@app.command("deactivate")
def deactivate_post(post_id: int):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π."""
    try:
        result = asyncio.run(post_activity_toggle(
            model=Post,
            post_id=post_id,
            active_status=False)
        )
        if result:
            typer.secho(f"    ‚úÖ  –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ü–æ—Å—Ç id={post_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", fg=typer.colors.GREEN)

    except Exception as e:
        typer.secho(
            f"    ‚ùå  –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ is_active "
            f"–†–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ü–æ—Å—Ç–∞ id={post_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n"
            f"{e}",
            fg=typer.colors.RED
        )


@app.command('set-photo-path')
def set_title(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        photo_path: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞. '
        ),
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –¥–æ —Ñ–æ—Ç–æ-—Ñ–∞–π–ª–∞."""

    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='photo_path',
        value=photo_path,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –ü—É—Ç—å –¥–æ —Ñ–æ—Ç–æ-—Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω."
    ))


@app.command('set-title')
def set_title(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        title: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞.'
        ),
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞."""

    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='title',
        value=title,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
    ))


@app.command('set-author')
def set_author(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        author: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä —Å–Ω–∏–º–∫–∞. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ —Å–Ω–∏–º–∫–∞.'
        )
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–Ω–∏–º–∫–∞."""

    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='author',
        value=author,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –ê–≤—Ç–æ—Ä —Å–Ω–∏–º–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω."
    ))


@app.command('set-date')
def set_date(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        date: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤–∞—è –¥–∞—Ç–∞ —Å–Ω–∏–º–∫–∞. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–Ω–∏–º–∫–∞'
        )
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å–Ω–∏–º–∫–∞."""
    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='date',
        value=date,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –î–∞—Ç–∞ —Å–Ω–∏–º–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
    ))


@app.command('set-location')
def set_location(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        location: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–Ω–∏–º–∫–∞. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å–Ω–∏–º–∫–∞.'
        )
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å–Ω–∏–º–∫–∞."""
    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='location',
        value=location,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –õ–æ–∫–∞—Ü–∏—è —Å–Ω–∏–º–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
    ))


@app.command('set-caption')
def set_caption(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        caption: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞.'
        )
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞."""
    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='caption',
        value=caption,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –û–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
    ))


@app.command('set-header')
def set_header(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        header: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞.'
        )
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞."""
    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='header',
        value=header,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω."
    ))


@app.command('set-tags')
def set_tags(
        post_id: int = typer.Argument(..., help='ID —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'),
        tags: Optional[str] = typer.Option(
            None, '--value', help='–ù–æ–≤—ã–µ —Ç—ç–≥–∏ –ø–æ—Å—Ç–∞. '
                                  '–ü–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —Ç—ç–≥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. '
                                  '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç—ç–≥–æ–≤ –ø–æ—Å—Ç–∞.'
        )
):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞."""
    asyncio.run(update_post_field(
        model=Post,
        post_id=post_id,
        field_name='tags',
        value=tags,
        success_message=f"    ‚úÖ  –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ {post_id} :: –¢—ç–≥–∏ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    ))
